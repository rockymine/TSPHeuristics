@using Excubo.Blazor.Canvas
@using Excubo.Blazor.Canvas.Contexts
@using System.Diagnostics
@using TravellingSalesmanProblem.Algorithms
@using TravellingSalesmanProblem.Graph
@using WebApplication.Utils
@using WebApplication.Components
@using StardustDL.RazorComponents.Markdown
<div class="container-fluid">
    <h2 class="font-weight-bold">Interactive visualization of different TSP heuristics</h2>
    <div class="row">
        <div class="col-md-2 p-0">
            <!-- Algorithm Settings -->
            <div class="bg-custom-light custom-input-group">
                <h5 class="font-weight-bold">Algorithm Settings</h5>
                <AlgorithmSettings @bind-AlgorithmEnum="@AppState.AlgorithmEnum"
                    @bind-MultiStart="@AppState.MultiStart"/>
            </div>
            <!-- Heuristic Settings -->
            <div class="bg-custom-light custom-input-group">
                <h5 class="font-weight-bold">Heuristic Settings</h5>
                <form>
                    @if (AppState.GraphHistory != null) {
                        @if (AppState.AlgorithmEnum == AlgorithmEnum.NN && !AppState.MultiStart) {
                            <NearestNeighborSettings @bind-StartNode="@AppState.StartNode"/>
                        }
                        @if (AppState.AlgorithmEnum == AlgorithmEnum.SA) {
                            <SimulatedAnnealingSettings @bind-AlphaSA="@AppState.AlphaSA"
                                @bind-PhaseLength="@AppState.PhaseLength" 
                                @bind-MinTemp="@AppState.MinTemp"
                                @bind-StartTemp="@AppState.StartTemp"
                                @bind-NeighbourEnum="@AppState.NeighbourEnum"
                                @bind-CalculateTemperature="@AppState.CalculateTemperature"/>
                        }
                        @if (AppState.AlgorithmEnum == AlgorithmEnum.HC) {
                            <HillClimbingSettings @bind-NeighbourEnum="@AppState.NeighbourEnum"
                                @bind-DescentType="@AppState.DescentType"/>
                        }
                        @if (AppState.AlgorithmEnum == AlgorithmEnum.AS) {
                            <AntSystemSettings @bind-Iterations="@AppState.Iterations"
                                @bind-AlphaACS="@AppState.AlphaACS"
                                @bind-AntCount="@AppState.AntCount" @bind-Beta="@AppState.Beta"
                                @bind-BreakWhenPathsAreEqual="@AppState.BreakWhenPathsAreEqual"
                                @bind-GlobalUpdatingRule="@AppState.GlobalUpdatingRule"/>
                        }
                        <button class="btn btn-danger" type="submit" @onclick="e => UpdateEnumerator()">Reset</button>
                } 
                </form>
            </div>
            <!-- Canvas Settings -->
            <div class="bg-custom-light custom-input-group">
                <h5 class="font-weigth-bold">Canvas Settings</h5>
                <CanvasDisplaySettings @bind-Scale="@AppState.Scale" @bind-NodeRadius="@AppState.NodeRadius"
                    @bind-ShowGrid="@AppState.ShowGrid" @bind-AnnotateEdges="@AppState.AnnotateEdges" @bind-ColorizeChanges="@AppState.ColorizeChanges"
                    @bind-AnimationDelay="@AppState.AnimationDelay"/>                
            </div>
            <!-- Graph Settings -->
            <div class="bg-custom-light custom-input-group">
                <h5 class="font-weight-bold">Graph Settings</h5>
                <div class="form-group">
                    <label for="selectGraphSource">Graph Source</label>
                    <select class="form-control" name="graphSource" id="selectGraphSource" @bind="AppState.GraphSource">
                        <option value="Text" @onselect="e => AppState.GraphSource = GraphSource.Text">Text</option>
                        <option value="File" @onselect="e => AppState.GraphSource = GraphSource.File">File</option>
                        <option value="Random" @onselect="e => AppState.GraphSource = GraphSource.Random">Random</option>
                    </select>
                </div>
                @if (AppState.GraphSource == GraphSource.Text) {
                    <div class="form-group">
                        <textarea class="form-control" @bind="AppState.DefaultGraph" style="height: 200px;"></textarea>
                    </div>
                } else if (AppState.GraphSource == GraphSource.Random) {
                    <RandomGraphSettings @bind-NodeCount="AppState.NodeCount" @bind-MaxX="AppState.MaxX" @bind-MaxY="AppState.MaxY"/>
                } else if (AppState.GraphSource == GraphSource.File) {
                    <FileInput @ref="@AppState.FileInput"/>
                }
                <div class="form-group">
                    <button class="btn btn-primary" type="button" @onclick="e => InitiateGraph(AppState.GraphSource)">Execute Algorithm</button>
                    
                    @if (AppState.Instance != null) {
                        <FileOutput @ref="@AppState.FileOutput"/>
                    }                    
                </div>
                <p>@AppState.Error</p>
            </div>
        </div>
        <div class="col-md-4 p-0">
            <!-- State -->
            <div class="bg-custom-light custom-input-group">
                <h5 class="font-weight-bold">Visualization Control</h5>
                @if (AppState.GraphHistory != null) {
                    <div class="input-group">
                        <div class="btn-toolbar">
                            <button type="button" disabled="@(AppState.GraphHistory.First == AppState.CurrentHistoryNode)" class="btn btn-primary btn-sm" data-bs-toggle="tooltip" data-bs-placement="top" title="Jump First" @onclick="e => JumpFirst()">«</button>
                            <button type="button" disabled="@(AppState.GraphHistory.First == AppState.CurrentHistoryNode)" class="btn btn-primary btn-sm" data-bs-toggle="tooltip" data-bs-placement="top" title="Reverse" @onclick="e => ReverseHistory()">‹</button>
                            @if (AppState.AutoAdvance) {
                                <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="tooltip" data-bs-placement="top" title="AutoAdvance = false" @onclick="e => AppState.AutoAdvance = false">⏸</button>
                            } else {
                                <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="tooltip" data-bs-placement="top" title="AutoAdvance = true" @onclick="e => AppState.AutoAdvance = true">▶</button>
                            }
                            <button type="button" disabled="@(AppState.GraphHistory.Last == AppState.CurrentHistoryNode)" class="btn btn-primary btn-sm" data-bs-toggle="tooltip" data-bs-placement="top" title="Advance" @onclick="e => AdvanceHistory()">›</button>
                            <button type="button" disabled="@(AppState.GraphHistory.Last == AppState.CurrentHistoryNode)" class="btn btn-primary btn-sm" data-bs-toggle="tooltip" data-bs-placement="top" title="Jump Last" @onclick="e => JumpLast()">»</button>
                        </div>
                    </div>
                }
                <span>Execution Time: @AppState.TimeSpan.Minutes m @AppState.TimeSpan.Seconds s @AppState.TimeSpan.Milliseconds ms (@Math.Round((double)AppState.Stopwatch.ElapsedMilliseconds / 1000, 3) s)</span><br/>
                @if (AppState.CurrentHistoryNode != null) {
                    @foreach (var kvp in AppState.CurrentHistoryNode.Value.Messages) {
                        <span>@kvp.Key: @kvp.Value</span><br/>
                    }
                }
            </div>
            <!-- Graph View -->
            <div class="bg-custom-light custom-input-group">
                <h5 class="font-weight-bold">Graph View</h5>
                @if (AppState.AlgorithmEnum is AlgorithmEnum.SA or AlgorithmEnum.HC) {
                    <h6>Previous (Iteration Start)</h6>
                    <Canvas @ref="@AppState.PreviousCanvas" width="@AppState.CanvasSettings.Width" height="@AppState.CanvasSettings.Height"/>
                }
                    <h6>Current (Iteration End)</h6>
                    <Canvas @ref="@AppState.CurrentCanvas" width="@AppState.CanvasSettings.Width" height="@AppState.CanvasSettings.Height"/>
            </div>
            <!-- Calculations -->
            @if (AppState.GraphHistory != null &&
                AppState.CurrentHistoryNode.Value != null &&
                AppState.CurrentHistoryNode.Value.Equations.Count != 0) {
                <div class="bg-custom-light custom-input-group">
                    <h5 class="font-weight-bold">Calculations</h5>
                    @foreach (var kvp in AppState.CurrentHistoryNode.Value.Equations) {
                        <span>@kvp.Key</span><br/>
                        <MarkdownRenderer Value="@kvp.Value.Latex"/>
                        <MarkdownRenderer Value="@kvp.Value.Generate()"/>
                        <MarkdownRenderer Value="@kvp.Value.Result"/>
                    }
                </div>
            }
        </div>
        <div class="col-md-6 p-0">
            <!-- Charts -->
            @if (AppState.GraphHistory != null &&
                AppState.CurrentHistoryNode.Value.ChartInfo.Count >= 1) {
                <div class="bg-custom-light custom-input-group">
                    @if (AppState.AlgorithmEnum is AlgorithmEnum.SA) {
                        <div class="row">
                            <div class="col-md-6">
                                <ChartJS @ref="@AppState.ChartJS[0]"
                                    Chart="@AppState.CurrentHistoryNode.Value.ChartInfo[0]"
                                    ChartID="sa_temperature">
                                </ChartJS>
                            </div>
                            @if (AppState.CurrentHistoryNode.Value.ChartInfo.Count >= 2) {
                                <div class="col-md-6">
                                    <ChartJS @ref="@AppState.ChartJS[1]"
                                        Chart="@AppState.CurrentHistoryNode.Value.ChartInfo[1]"
                                        ChartID="sa_distance">
                                    </ChartJS>
                                </div>
                            }
                        </div>
                    }
                    @if (AppState.AlgorithmEnum is AlgorithmEnum.HC) {
                        <div class="col-md-12">
                            <ChartJS @ref="@AppState.ChartJS[0]"
                                Chart="@AppState.CurrentHistoryNode.Value.ChartInfo[0]"
                                ChartID="hc_distance">
                            </ChartJS>
                        </div>
                    }    
                </div>
            }
            <!-- Tables -->
            <div class="bg-custom-light custom-input-group">
                <TableGenerator @ref="@AppState.TableGenerator"/>
            </div>
        </div>
    </div>
</div>

@code {
    private AppState AppState = new();

    protected override Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            Task.Run(async () => {
                while (true) {
                    await Task.Delay(AppState.AnimationDelay);

                    if (AppState.AutoAdvance)
                        await AdvanceHistory(true);
                }
            });

            AppState.FileInput.LoadedFileChanged += StateHasChanged;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    public async Task InitiateGraph(GraphSource graphSource) {
        switch (graphSource) {
            case GraphSource.Text:
                try {
                    AppState.Instance = GraphProblem.FromText(AppState.DefaultGraph);
                } catch {
                    AppState.Error = "The specified text does not contain a valid graph definition.";
                    return;
                }
                break;
            case GraphSource.Random:
                AppState.Instance = GraphProblem.RandomGraphProblem(AppState.MaxX, AppState.MaxY, AppState.NodeCount);
                break;
            case GraphSource.File:
                try {
                    AppState.Instance = GraphProblem.FromText(AppState.FileInput.LoadedFile);
                } catch {
                    AppState.Error = "The specified file does not contain a valid graph definition.";
                    return;
                }
                break;
        }

        AppState.CanvasSettings.MinPos = AppState.Instance.FindMin();
        AppState.CanvasSettings.MaxPos = AppState.Instance.FindMax();
        AppState.CanvasSettings.Scale = AppState.Scale;
        AppState.CanvasSettings.NodeRadius = AppState.NodeRadius;
        AppState.CanvasSettings.ShowGrid = AppState.ShowGrid;
        AppState.CanvasSettings.BackgroundColor = AppState.BackgroundColor;

        await UpdateEnumerator();
    }

    private async Task JumpFirst() {
        AppState.AutoAdvance = false;
        var canChange = await CanChangeHistory();
        if (!canChange)
            return;

        if (AppState.GraphHistory.First == null)
            return;

        AppState.CurrentHistoryNode = AppState.GraphHistory.First;
        await Redraw();
    }

    private async Task JumpLast() {
        AppState.AutoAdvance = false;
        var canChange = await CanChangeHistory();
        if (!canChange)
            return;

        if (AppState.GraphHistory.Last == null)
            return;

        AppState.CurrentHistoryNode = AppState.GraphHistory.Last;
        await Redraw();
    }

    private async Task AdvanceHistory(bool automatic = false) {
        if (!automatic)
            AppState.AutoAdvance = false;
        
        var canChange = await CanChangeHistory();
        if (!canChange)
            return;

        if (AppState.CurrentHistoryNode.Next == null)
            return;

        AppState.CurrentHistoryNode = AppState.CurrentHistoryNode.Next;
        await Redraw();
    }

    private async Task ReverseHistory() {
        AppState.AutoAdvance = false;
        var canChange = await CanChangeHistory();
        if (!canChange)
            return;

        if (AppState.CurrentHistoryNode.Previous == null)
            return;

        AppState.CurrentHistoryNode = AppState.CurrentHistoryNode.Previous;
        await Redraw();
    }

    private async Task<bool> CanChangeHistory() {
        if (AppState.GraphHistory == null)
            return false;
        if (AppState.CurrentHistoryNode == null) {
            AppState.CurrentHistoryNode = AppState.GraphHistory.First;
            await Redraw();
            return false;
        }

        return true;
    }

    private async Task Redraw() {
        AppState.CanvasSettings.Annotate = AppState.AnnotateEdges;
        AppState.CanvasSettings.Colorize = AppState.ColorizeChanges;

        await FillCanvases();
        await UpdateVisualsFromGraphState();
        StateHasChanged();
    }

    private async Task FillCanvases() {
        if (AppState.CurrentHistoryNode.Previous != null && (AppState.AlgorithmEnum is AlgorithmEnum.SA or AlgorithmEnum.HC)) {
            await ResetCanvas(await AppState.PreviousCanvas.GetContext2DAsync(), AppState.CanvasSettings);
            await FillCanvas(AppState.PreviousCanvas, AppState.CurrentHistoryNode.Previous.Value);
        }

        await ResetCanvas(await AppState.CurrentCanvas.GetContext2DAsync(), AppState.CanvasSettings);
        await FillCanvas(AppState.CurrentCanvas, AppState.CurrentHistoryNode.Value);
    }

    private async Task FillCanvas(Canvas canvas, GraphState state) {
        await using (var context = await canvas.GetContext2DAsync()) {
            await CanvasRenderer.DrawEdges(context, state, AppState.CurrentHistoryNode, AppState.CanvasSettings);
            await CanvasRenderer.DrawNodes(context, state, AppState.CurrentHistoryNode, AppState.CanvasSettings);
        }
    }

    private async Task ResetCanvases() {
        if (AppState.PreviousCanvas != null && (AppState.AlgorithmEnum is AlgorithmEnum.SA or AlgorithmEnum.HC)) {
            await ResetCanvas(await AppState.PreviousCanvas.GetContext2DAsync(), AppState.CanvasSettings);
        }

        if (AppState.CurrentCanvas != null) {
            await ResetCanvas(await AppState.CurrentCanvas.GetContext2DAsync(), AppState.CanvasSettings);
        }
    }

    private async Task ResetCanvas(Context2D context, CanvasSettings settings) {
        await context.ClearRectAsync((int)settings.MinPos.X, (int)settings.MinPos.Y, settings.Width, settings.Height);
        await context.FillStyleAsync(settings.BackgroundColor);
        await context.FillRectAsync((int)settings.MinPos.X, (int)settings.MinPos.Y, settings.Width, settings.Height);

        if (settings.ShowGrid)
            await CanvasRenderer.DrawGrid(context, settings);
    }

    private async Task UpdateEnumerator() {
        AppState.Instance.Reset();
        AppState.TableGenerator.Reset();
        await ResetCanvases();

        AppState.Stopwatch.Restart();

        switch (AppState.AlgorithmEnum) {
            case AlgorithmEnum.NN:
                AppState.NearestNeighbor.Start = AppState.Instance.Nodes[AppState.StartNode];
                AppState.GraphHistory = AppState.NearestNeighbor.FindPath(AppState.Instance);
                break;
            case AlgorithmEnum.SA:
                AppState.SimulatedAnnealing.Alpha = AppState.AlphaSA;
                AppState.SimulatedAnnealing.PhaseLength = AppState.PhaseLength;
                AppState.SimulatedAnnealing.StartTemp = AppState.StartTemp;
                AppState.SimulatedAnnealing.MinTemp = AppState.MinTemp;
                AppState.SimulatedAnnealing.NeighbourEnum = AppState.NeighbourEnum;
                AppState.SimulatedAnnealing.CalculateTemperature = AppState.CalculateTemperature;
                AppState.GraphHistory = AppState.SimulatedAnnealing.FindPath(AppState.Instance);
                break;
            case AlgorithmEnum.AS:
                AppState.AntSystem.Iterations = AppState.Iterations;
                AppState.AntSystem.AntCount = AppState.AntCount;
                AppState.AntSystem.Alpha = AppState.AlphaACS;
                AppState.AntSystem.Beta = AppState.Beta;
                AppState.AntSystem.BreakWhenPathsAreEqual = AppState.BreakWhenPathsAreEqual;
                AppState.AntSystem.GlobalUpdatingRule = AppState.GlobalUpdatingRule;
                AppState.GraphHistory = AppState.AntSystem.FindPath(AppState.Instance);
                break;
            case AlgorithmEnum.HC:
                AppState.HillClimbing.NeighbourEnum = AppState.NeighbourEnum;
                AppState.HillClimbing.DescentType = AppState.DescentType;
                AppState.GraphHistory = AppState.HillClimbing.FindPath(AppState.Instance);
                break;
        }

        AppState.FileOutput.LoadedFile = GraphProblem.SerializeGraph(AppState.Instance);
        AppState.Stopwatch.Stop();
        AppState.TimeSpan = AppState.Stopwatch.Elapsed;

        AppState.CurrentHistoryNode = AppState.GraphHistory.First;
        await Redraw();
    }

    private async Task UpdateVisualsFromGraphState() {
        AppState.TableGenerator.UpdateFromGraphState(AppState.CurrentHistoryNode, AppState.AlgorithmEnum, AppState.NeighbourEnum);
        foreach (var chart in AppState.ChartJS) {
            if (chart != null)
                await chart.UpdateFromGraphState();
        }
    }
}