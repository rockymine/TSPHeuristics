@page "/graph"
@using Excubo.Blazor.Canvas
@using Excubo.Blazor.Canvas.Contexts
@using System.Diagnostics
@using TravellingSalesmanProblem.Algorithms
@using TravellingSalesmanProblem.Graph
@using WebApplication.Utils
<div class="container-fluid">
    <div class="col">
        <h2 class="font-weight-bold">Web Application for the interactive visualization of different heuristics</h2>
        <h4 class="font-weight-light">Master thesis project of Michael Ganske at the University of Hildesheim</h4>
        <div class="row">
            <div class="col-md-4 col-sm-6">
                <h3 class="font-weight-bold">Settings</h3>
                <div class="row">
                    <div class="col-md-6 col-sm-6">
                        <h5 class="font-weight-light">Select Heuristics</h5>
                        <div class="form-group">
                            <select class="form-control" name="heuristics" id="selectHeuristics" @bind="algorithmEnum">
                                <option value="NN" @onselect="e => algorithmEnum = AlgorithmEnum.NN">Nearest Neighbor</option>
                                <option value="SA" @onselect="e => algorithmEnum = AlgorithmEnum.SA">Simulated Annealing</option>
                                <option value="MSNN" @onselect="e => algorithmEnum = AlgorithmEnum.MSNN">Multi Start (NN)</option>
                                <option value="ACS" @onselect="e => algorithmEnum = AlgorithmEnum.ACS">Ant Colony System</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6 col-sm-6">
                        @if (enumerator != null) {
                            <h5 class="font-weight-light">Heuristic Parameters</h5>
                            @if (algorithmEnum == AlgorithmEnum.NN) {
                                <div class="form-group">
                                    <label for="startnodeselect">Select Start Node</label>
                                    <div id="startnodeselect" class="input-group">
                                        <div class="input-group-prepend">
                                            <button class="btn btn-primary btn-sm" type="button" @onclick="e => StartNode--">-</button>
                                        </div>
                                        <div class="input-group-text">@graph.Nodes[StartNode].Index</div>
                                        <div class="input-group-append">
                                            <button class="btn btn-primary btn-sm" type="button" @onclick="e => StartNode++">+</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            @if (algorithmEnum == AlgorithmEnum.SA) {
                                <div class="form-group">
                                    <label for="iter1">MaxIter1</label>
                                    <input type="number" id="iter1" class="form-control" @bind="MaxIter1">
                                </div>
                                <div class="form-group">
                                    <label for="iter2">MaxIter2</label>
                                    <input type="number" id="iter2" class="form-control" @bind="MaxIter2">
                                </div>
                                <div class="form-group">
                                    <label for="temp1">StartTemp</label>
                                    <input type="number" id="temp1" class="form-control" @bind="StartTemp">
                                </div>
                                <div class="form-group">
                                    <label for="temp2">MinTemp</label>
                                    <input type="number" step="0.005" id="temp2" class="form-control" @bind="MinTemp">
                                </div>
                                <div class="form-group">
                                    <label for="alphaSA">Alpha</label>
                                    <input type="number" step="0.05" id="alphaSA" class="form-control" @bind="AlphaSA">
                                </div>
                            }
                            @if (algorithmEnum == AlgorithmEnum.ACS) {
                                <div class="form-group">
                                    <label for="ants">Ant Count</label>
                                    <input type="number" id="ants" class="form-control" @bind="AntCount">
                                </div>
                                <div class="form-group">
                                    <label for="alphaACS">Alpha</label>
                                    <input type="number" step="0.05" id="alphaACS" class="form-control" @bind="AlphaACS">
                                </div>
                                <div class="form-group">
                                    <label for="rho">Rho</label>
                                    <input type="number" step="0.05" id="rho" class="form-control" @bind="Rho">
                                </div>
                                <div class="form-group">
                                    <label for="beta">Beta</label>
                                    <input type="number" step="0.5" id="beta" class="form-control" @bind="Beta">
                                </div>
                                <div class="form-group">
                                    <label for="ratio">Exploit vs. Explore</label>
                                    <input type="number" step="0.05" id="ratio" class="form-control" @bind="ExploitVsExplore">
                                </div>
                            }
                            @if (algorithmEnum != AlgorithmEnum.MSNN) {
                                <div class="form-group">
                                    <button class="btn btn-warning" type="button" @onclick="e => NextState(true)">Update</button>
                                </div>
                            }
                        }
                    </div>
                </div>
                <hr/>
                <h5 class="font-font-weight-light">Parameters for text-based graph</h5>
                <div class="form-group">
                    <textarea class="form-control" @bind="graphDefinition" style="height: 200px;"></textarea>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary" type="button" @onclick="e => InitiateGraph(true)">Draw From Text</button>
                </div>
                <hr/>
                <h5 class="font-font-weight-light">Parameters for random graph</h5>
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="maxWidth">Max. X</label>
                            <input type="number" id="maxWidth" class="form-control" @bind="MaxX">
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="maxHeight">Max. Y</label>
                            <input type="number" id="maxHeight" class="form-control" @bind="MaxY">
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="maxNodes">Nodes</label>
                            <input type="number" id="maxNodes" class="form-control" @bind="NodeCount">
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary" type="button" @onclick="e => InitiateGraph(false)">Draw Random Graph</button>
                </div>
            </div>
            <div class="col-md-8 col-sm-6">
                <h3 class="font-weight-bold">Graphs</h3>
                <div class="row">
                    <div class="col">
                        <h5 class="font-weight-bold">Current</h5>
                        <Canvas @ref="currentCanvas" width="@CanvasWidth" height="@CanvasHeight"></Canvas>
                        @if (enumerator != null && !enumerator.Current.Finished) {
                            @if (!autoAdvance) {
                                <div class="form-group">
                                    <button class="btn btn-primary btn-sm" type="button" @onclick="e => NextState(false)">Advance to next Graph State</button>
                                </div>
                            }
                            <div class="form-group">
                                <div class="custom-control custom-switch">
                                    <input class="custom-control-input" type="checkbox" id="switch" @bind="autoAdvance">
                                    <label class="custom-control-label" for="switch">Toggle auto-advance</label>
                                </div>
                            </div>
                        }
                        @if (previous != null ) {
                            <div class="form-group">
                                <button class="btn btn-danger btn-sm" type="button" @onclick="e => NextState(true)">Reset</button>
                            </div>
                        }
                        <hr/>
                        @if (enumerator != null && enumerator.Current != null) {
                            <h5 class="font-weight-light">State Messages</h5>
                            <span><b>Success</b>: @enumerator.Current.Success</span><br/>
                            <span><b>Finished</b>: @enumerator.Current.Finished</span><br/>

                            @foreach (var kvp in enumerator.Current.Messages) {
                                <span><b>@kvp.Key</b>: @kvp.Value</span><br/>
                            }

                            <span><b>Elapsed Time</b>: @TimeSpan.Minutes m @TimeSpan.Seconds s @TimeSpan.Milliseconds ms</span><br/>
                        }
                    </div>
                    <div class="col">
                        <h5 class="font-weight-bold">Previous</h5>
                        <Canvas @ref="previousCanvas" width="@CanvasWidth" height="@CanvasHeight"></Canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@*@if (algorithmEnum == AlgorithmEnum.NN) {
    <TableGenerator @ref="tableGenerator"/>
}
@if (algorithmEnum == AlgorithmEnum.SA) {
    <ChartGenerator @ref="chartGenerator"/>
}*@

@code {
    //components
	private Canvas currentCanvas;
    private Canvas previousCanvas;
	private TableGenerator tableGenerator;
    private ChartGenerator chartGenerator;

	//graph
	private GraphProblem graph;
    private GraphState previous;
    private NearestNeighbour nearestNeighbour = new();
    private SimulatedAnnealing simulatedAnnealing = new();
    private AntAlgorithm antColonySystem = new();
	private IEnumerator<GraphState> enumerator;
	private AlgorithmEnum algorithmEnum;
	private string graphDefinition = @"n,1,11,5
n,2,6,4
n,3,4,10
n,4,4,2
n,5,2,4
n,6,7,7
n,7,8,8
n,8,9,2
n,9,5,7
n,10,7,1
n,11,1,6
n,12,11,11";

    private const float Scale = 20;
    private const int Delay = 1;
    private bool autoAdvance;
    private bool drawComplete;
    
    /* GraphView Parameters */
    private int CanvasWidth;
    private int CanvasHeight;
    private int _horizontal = 30;
    private int _vertical = 30;
    private int _count = 30;

    private int MaxX {
        get => _horizontal;
        set {
            if (value == _horizontal)
                return;
            if (value < 10 || value > 90)
                return;

            _horizontal = value;
        }
    }
    
    private int MaxY {
        get => _vertical;
        set {
            if (value == _vertical)
                return;
            if (value < 10 || value > 90)
                return;

            _vertical = value;
        }
    }
    
    private int NodeCount {
        get => _count;
        set {
            if (value == _count)
                return;
            if (value < 5 || value > 90)
                return;

            _count = value;
        }
    }

    /* Nearest Neighbor Parameters */
    private int _nodeValue;

    private int StartNode {
        get => _nodeValue;
        set {
            if (value == _nodeValue)
                return;
            if (value < 0 || value > graph.Nodes.Count - 1)
                return;

            _nodeValue = value;
        }
    }

    /* Simulated Annealing Parameters */
    private int _maxIter1 = 20; //iterations without temperature change
    private int _maxIter2 = 400; //temperature changes
    private double _startTemp = 100;
    private double _minTemp = Math.Pow(10,-8);
    private double _alphaSA = 0.98;

    private int MaxIter1 {
        get => _maxIter1;
        set {
            if (value == _maxIter1)
                return;
            if (value < 5 || value > 20)
                return;

            _maxIter1 = value;
        }
    }

    private int MaxIter2 {
        get => _maxIter2;
        set {
            if (value == _maxIter2)
                return;
            if (value < 100 || value > 1000)
                return;

            _maxIter2 = value;
        }
    }

    private double StartTemp {
        get => _startTemp;
        set {
            if (value == _startTemp)
                return;
            if (value < 50 || value > 100_000) {
                return;
            }

            _startTemp = value;
        }
    }

    private double MinTemp {
        get => _minTemp;
        set {
            if (value == _minTemp)
                return;
            if (value < 0.0000001 || value >= _startTemp)
                return;

            _minTemp = value;
        }
    }

    private double AlphaSA {
        get => _alphaSA;
        set {
            if (value == _alphaSA)
                return;
            if (value < 0.5 || value >= 1)
                return;

            _alphaSA = value;
        }
    }

    /* Ant Colony Search Parameters */
    private double _alphaACS = 0.1;
    private double _beta = 2;
    private double _rho = 0.1;
    private double _exploitVsExplore = 0.9;
    private int _antCount = 10;

    private double AlphaACS {
        get => _alphaACS;
        set {
            if (value == _alphaACS)
                return;
            if (value <= 0 || value >= 1)
                return;

            _alphaACS = value;
        }
    }

    private double Beta {
        get => _beta;
        set {
            if (value == _beta)
                return;
            if (value <= 0 || value >= 10)
                return;

            _beta = value;
        }
    }

    private double Rho {
        get => _rho;
        set {
            if (value == _rho)
                return;
            if (value <= 0 || value >= 1)
                return;

            _rho = value;
        }
    }

    private double ExploitVsExplore {
        get => _exploitVsExplore;
        set {
            if (value == _exploitVsExplore)
                return;
            if (value < 0.5 || value >= 1)
                return;

            _exploitVsExplore = value;
        }
    }

    private int AntCount {
        get => _antCount;
        set {
            if (value == _antCount)
                return;
            if (value < 1 || value > enumerator.Current.Nodes.Count)
                return;

            _antCount = value;
        }
    }

    private Stopwatch stopwatch = new();
    private TimeSpan TimeSpan = new();

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            //await InitiateGraph(true);
            //await NextState(true);

            Task.Run(async () => {
                while (true) {
                    await Task.Delay(Delay);

                    if (autoAdvance)
                        await NextState(false);
                }
            });
        }
    }

    private async Task InitiateGraph(bool textbased) {
        graph = textbased ? GraphProblem.FromText(graphDefinition) :
        GraphProblem.RandomGraphProblem(MaxX, MaxY, NodeCount);
        CanvasWidth = (int)(Scale * (graph.FindMax().X + 1));
        CanvasHeight = (int)(Scale * (graph.FindMax().Y + 1));
        await NextState(true);
    }   

    private async Task NextState(bool reset) {
        if (reset) {
            stopwatch.Restart();
            await UpdateEnumerator();
        }
            
        if (enumerator == null)
            await InitiateGraph(true);

        if (!drawComplete) {
            if (enumerator.Current != null)
                previous = enumerator.Current.DeepCopy();

            enumerator.MoveNext();
            TimeSpan = stopwatch.Elapsed;

            if (previous != null) {
                previous.ComparePathEdges(enumerator.Current);
                await FillCanvas(previousCanvas);
            }

            if (enumerator.Current.Finished) {
                drawComplete = true;
                stopwatch.Stop();
            }
            
            await FillCanvas(currentCanvas);
            @*UpdateVisualsFromGraphState();*@
            StateHasChanged();
        }
    }

    private async Task FillCanvas(Canvas canvas) {
        await using (var context = await canvas.GetContext2DAsync()) {
            await ResetCanvas(context);

            if (canvas == previousCanvas) {
                await DrawPath(context, previous);
            } else {
                await DrawPath(context, enumerator.Current);
            }            
        }
    }

    private async Task DrawPath(Context2D context, GraphState graph) {
        await CanvasRenderer.DrawEdges(context, graph, CanvasHeight);
        await CanvasRenderer.DrawNodes(context, graph, CanvasHeight);
    }

    private async Task ResetAllCanvases() {
        if (previousCanvas != null) {
            previous = null;
            await ResetCanvas(await previousCanvas.GetContext2DAsync());
        }

        if (currentCanvas != null)
            await ResetCanvas(await currentCanvas.GetContext2DAsync());
    }

    private async Task ResetCanvas(Context2D context) {
        await context.ClearRectAsync(0, 0, CanvasWidth, CanvasHeight);
        await CanvasRenderer.DrawGrid(context, graph.FindMax(), CanvasHeight);
    }

    private async Task UpdateEnumerator() {
        drawComplete = false;
        await ResetAllCanvases();

        switch (algorithmEnum) {
            case AlgorithmEnum.NN:
                nearestNeighbour.Start = graph.Nodes[StartNode];
                enumerator = nearestNeighbour.FindPath(graph).GetEnumerator();
                break;
            case AlgorithmEnum.SA:
                simulatedAnnealing.Alpha = AlphaSA;
                simulatedAnnealing.MaxIter1 = MaxIter1;
                simulatedAnnealing.MaxIter2 = MaxIter2;
                simulatedAnnealing.StartTemp = StartTemp;
                simulatedAnnealing.MinTemp = MinTemp;
                enumerator = simulatedAnnealing.FindPath(graph).GetEnumerator();
                break;
            case AlgorithmEnum.MSNN:
                enumerator = nearestNeighbour.MultiStart(graph).GetEnumerator();
                break;
            case AlgorithmEnum.ACS:
                antColonySystem.AntCount = AntCount;
                antColonySystem.Alpha = AlphaACS;
                antColonySystem.Rho = Rho;
                antColonySystem.Beta = Beta;
                antColonySystem.ExploitVsExplore = ExploitVsExplore;
                enumerator = antColonySystem.FindPath(graph).GetEnumerator();
                break;
            default: break;
        }
    }

    @*private void UpdateVisualsFromGraphState() {
        if (algorithmEnum == AlgorithmEnum.NN)
            tableGenerator.UpdateFromGraphState(enumerator.Current);
        if (algorithmEnum == AlgorithmEnum.SA)
            chartGenerator.UpdateFromGraphState(enumerator.Current);
    }*@
}