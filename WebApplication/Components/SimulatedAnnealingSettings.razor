@using TravellingSalesmanProblem.Algorithms

<div class="form-group">
    <label for="iter1">Phase Length</label>
    <input type="number" id="iter1" class="form-control" @bind="PhaseLength">
</div>
<div class="form-group">
    <label for="temp1">StartTemp</label>
    <input type="number" id="temp1" class="form-control" @bind="StartTemp">
</div>
<div class="form-group">
    <label for="temp2">MinTemp</label>
    <input type="number" step="0.005" id="temp2" class="form-control" @bind="MinTemp">
</div>
<div class="form-group">
    <label for="alphaSA">Alpha</label>
    <input type="number" step="0.05" id="alphaSA" class="form-control" @bind="AlphaSA">
</div>
<NeighborFunctionSettings @bind-NeighbourEnum="@NeighbourEnum"></NeighborFunctionSettings>

@code {
    private NeighbourType neighbourEnum;
    [Parameter]
    public NeighbourType NeighbourEnum {
        get => neighbourEnum;
        set {
            if (value == neighbourEnum)
                return;

            neighbourEnum = value;
            NeighbourEnumChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<NeighbourType> NeighbourEnumChanged { get; set; }

    private int phaseLength;
    [Parameter]
    public int PhaseLength {
        get => phaseLength;
        set {
            if (value == phaseLength)
                return;

            phaseLength = value;
            PhaseLengthChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<int> PhaseLengthChanged { get; set; }

    private double startTemp;
    [Parameter]
    public double StartTemp {
        get => startTemp;
        set {
            if (value == startTemp)
                return;

            startTemp = value;
            StartTempChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<double> StartTempChanged { get; set; }

    private double minTemp;
    [Parameter]
    public double MinTemp {
        get => minTemp;
        set {
            if (value == minTemp)
                return;

            minTemp = value;
            MinTempChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<double> MinTempChanged { get; set; }

    private double alphaSA;
    [Parameter]
    public double AlphaSA {
        get => alphaSA;
        set {
            if (value == alphaSA)
                return;

            alphaSA = value;
            AlphaSAChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<double> AlphaSAChanged { get; set; }
}