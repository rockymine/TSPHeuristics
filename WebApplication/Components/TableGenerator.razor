@using TravellingSalesmanProblem.Algorithms
@using TravellingSalesmanProblem.Graph
@using WebApplication.Utils
@using StardustDL.RazorComponents.Markdown

@if (tableInfo.HasData) {
	var cols = Math.Min(tableInfo.Header.Count, MaxCols + 1);
	var rows = Math.Min(tableInfo.Cells.GetLength(0), MaxRows);

	<h5>@title</h5>
	<div class="table-responsive">
		<table class="table" style="text-align: center">
			<thead>
				<tr>
					@for (int i = 0; i < cols; i++) {
						<th><MarkdownRenderer Value=@tableInfo.Header[i]/></th>
					}

					@if (cols < tableInfo.Cells.GetLength(1)) {
						<th>
							<p><i class="bi bi-three-dots"></i></p>
						</th>
					}
				</tr>
				
			</thead>
			<tbody>
				@for (int i = 0; i < rows; i++) {
					<tr>
						@for (int j = 0; j < cols; j++) {
							<td class="@tableInfo.Cells[i,j].Class"><MarkdownRenderer Value="@tableInfo.Cells[i,j].Value"/></td>
						}

						@if (cols < tableInfo.Cells.GetLength(1)) {
							<td>
								<i class="bi bi-three-dots"></i>
							</td>
						}
					</tr>
				}

				@if (rows < tableInfo.Cells.GetLength(0)) {
					<tr>
						@for (int j = 0; j < cols; j++) {
							<td><i class="bi bi-three-dots-vertical"></i></td>
						}

						@if (cols < tableInfo.Cells.GetLength(1)) {
							<td>
								<div style="transform: rotate(45deg);">
									<i class="bi bi-three-dots"></i>
								</div>
							</td>
						}
					</tr>
				}
			</tbody>
		</table>
	</div>

	<!-- Table expansion through modal -->
	@if (CanShowModal) {
		@if (rows < tableInfo.Cells.GetLength(0) || cols < tableInfo.Cells.GetLength(1)) {
			<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
				Show Full Table
			</button>
		}

		<!-- Modal -->
		<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
			<div class="modal-dialog modal-full-width">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						<TableGenerator @ref=modalTable CanShowModal="false"/>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
					</div>
				</div>
			</div>
		</div>
	}
}

@code {
	[Parameter]
	public bool CanShowModal { get; set; } = true;
	[Parameter]
	public int MaxCols { get; set; } = int.MaxValue - 1;
	[Parameter]
	public int MaxRows { get; set; } = int.MaxValue;

	private TableInfo tableInfo = new();
	private string title;
	private TableGenerator modalTable;

	public void Reset() {
		tableInfo = new TableInfo();
		modalTable?.Reset();
	}

	public void UpdateFromGraphState(LinkedListNode<GraphState> node, AlgorithmEnum algorithmEnum, NeighbourType neighbourType) {
		tableInfo.Header.Clear();

		if (algorithmEnum == AlgorithmEnum.NN) {
			title = "Distance Matrix";
			CreateDistanceMatrix(node);
		} else if (algorithmEnum is AlgorithmEnum.SA or AlgorithmEnum.HC &&
			neighbourType is NeighbourType.Swap or NeighbourType.TwoOpt) {
			title = "Neighbor Function History";
			CreateSwapSummary(node, neighbourType);
		} else {
			title = "Tour History";
			CreateIterationTable(node);
		}

		StateHasChanged();
		modalTable?.UpdateFromGraphState(node, algorithmEnum, neighbourType);
	}

	private void CreateDistanceMatrix(LinkedListNode<GraphState> node) {
		var state = node.Value;

		tableInfo.Header.Add("");
		var size = state.Nodes.Count + 1;
		tableInfo.Cells = new TableCellInfo[size - 1, size];

		for (int i = 0; i < size - 1; i++) {
			for (int j = 0; j < size; j++) {
				var node1 = state.Nodes[i];

				if (j == 0) {
					tableInfo.Cells[i, j] = new TableCellInfo(node1.Index.ToString(), "font-weight-bold");
					continue;
				}

				var node2 = state.Nodes[j - 1];

				if (i == 0)
					tableInfo.Header.Add(node2.Index.ToString());
				if (j - i - 1 < 0) {
					tableInfo.Cells[i, j] = new TableCellInfo("<i class=\"bi bi-dash-lg\"></i>", null);
					continue;
				}

				var distance = Math.Round(Edge.GetDistanceRounded(node1, node2), 1);

				tableInfo.Cells[i, j] = new TableCellInfo(distance.ToString(),
					InPath(state.Path, node1, node2) ? "table-light" : null);
			}
		}
	}

	private void CreateIterationTable(LinkedListNode<GraphState> node) {
		var state = node.Value;

		tableInfo.Header = new List<string> { "Iteration", "Tour", "Distance" };

		if (tableInfo.Cells is null)
			tableInfo.Cells = new TableCellInfo[0, tableInfo.Header.Count];

		if (state.Path.Count > 0) {
			var temp = TableInfo.AddRow(tableInfo.Cells);
			var lastRow = temp.GetLength(0) - 1;

			temp[lastRow, 0] = new TableCellInfo(state.Iteration.ToString(), null);
			temp[lastRow, 1] = new TableCellInfo("(" + string.Join('-', state.Path.Select(n => n.Index)) + ")", null);
			temp[lastRow, 2] = new TableCellInfo(state.Distance.ToString(), null);

			tableInfo.Cells = temp;
		}
	}

	private void CreateSwapSummary(LinkedListNode<GraphState> node, NeighbourType neighbourType) {
		var state = node.Value;
		var formula = "$\\triangle=d_{i,j}+d_{i+1,j+1}-d_{i,i+1}-d_{j,j+1}$";

		if (neighbourType == NeighbourType.Swap)
			formula = "$\\triangle_{i,j}=\\begin{cases}d_{i,j-1}+d_{i,j+1}-d_{i,i-1}-d_{j,j+1},&i=j-1\\parallel j-1=i+1\\\\d_{j-1,i}+d_{j,i+1}-d_{j-1,j}-d_{i,i+1},&i=j+1 \\parallel j+1=i-1\\\\d_{i-1,j}+d_{j,i+1}+d_{j-1,i}+d_{i,j+1}-d_{i-1,i}-d_{i,i+1}-d_{j-1,j}-d_{j,j+1},&else\\end{cases}$";

		tableInfo.Header = new List<string> { "It.", "$i$", "$j$", "x", formula, "y" , "f(y)"};

		if (tableInfo.Cells is null)
			tableInfo.Cells = new TableCellInfo[0, tableInfo.Header.Count];

		if (state.SwapInfo != null) {
			var temp = TableInfo.AddRow(tableInfo.Cells);
			var lastRow = temp.GetLength(0) - 1;

			var i = state.SwapInfo.Nodes[0];
			var j = state.SwapInfo.Nodes[1];

			temp[lastRow, 0] = new TableCellInfo($"${state.Iteration}$", null);
			temp[lastRow, 1] = new TableCellInfo($"${state.SwapInfo.Nodes[0].Index}$", null);
			temp[lastRow, 2] = new TableCellInfo($"${state.SwapInfo.Nodes[1].Index}$", null);
			temp[lastRow, 3] = IndexedTourSummary(node.Previous?.Value, state, i, j);
			temp[lastRow, 4] = new TableCellInfo(state.SwapInfo.Calculation, null);
			temp[lastRow, 5] = IndexedTourSummary(state, state, i, j);
			temp[lastRow, 6] = new TableCellInfo(Math.Round(state.Distance, 1).ToString(), null);

			tableInfo.Cells = temp;
		}
	}

	private TableCellInfo IndexedTourSummary(GraphState a, GraphState b, Node i, Node j) {
		var content = string.Join(',', a.Path.Select(n =>
				n == i ? "\\underset{i}{\\text{" + n.Index + "}}" : 
				n == j ? "\\underset{j}{\\text{" + n.Index + "}}" : 
				n.Index.ToString()));

		return new TableCellInfo("$("+ $"{content}" + ")$", null);
	}

	private bool InPath(List<Node> path, Node node1, Node node2) {
		//1-2-3-1 example: node1 = 1, node2 = 3
		for (int i = 0; i < path.Count; i++) {
			if (path[i] != node1)
				continue;

			//check predecessor
			if (i > 0 && path[i - 1] == node2)
				return true;

			//check successor
			if (i < path.Count - 1 && path[i + 1] == node2)
				return true;
		}
		
		return false;
	}
}