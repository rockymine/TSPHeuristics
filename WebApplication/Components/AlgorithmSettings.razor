@using TravellingSalesmanProblem.Algorithms
<h5>Algorithm Settings</h5>
<div class="form-group">
    <select class="form-control" name="heuristics" id="selectHeuristics" @bind="AlgorithmEnum">
        <option value="NN" @onselect="e => AlgorithmEnum = AlgorithmEnum.NN">Nearest Neighbor</option>
        <option value="SA" @onselect="e => AlgorithmEnum = AlgorithmEnum.SA">Simulated Annealing</option>
        <option value="ACS" @onselect="e => AlgorithmEnum = AlgorithmEnum.ACS">Ant System</option>
        <option value="HC" @onselect="e => AlgorithmEnum = AlgorithmEnum.HC">Hill Climbing</option>
    </select>
</div>
@if (AlgorithmEnum is AlgorithmEnum.NN or AlgorithmEnum.HC) {
    <div class="form-check">
        <input type="checkbox" class="form-check-input" id="multi" @bind="MultiStart">
        <label class="form-check-label" for="multi">Multi Start</label>
    </div>
}

@code {
    private AlgorithmEnum algorithmEnum;
    [Parameter]
    public AlgorithmEnum AlgorithmEnum {
        get => algorithmEnum;
        set {
            if (value == algorithmEnum)
                return;

            algorithmEnum = value;
            AlgorithmEnumChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<AlgorithmEnum> AlgorithmEnumChanged { get; set; }

    private bool _multiStart;
    [Parameter]
    public bool MultiStart {
        get => _multiStart;
        set {
            if (value == _multiStart)
                return;

            _multiStart = value;
            MultiStartChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<bool> MultiStartChanged { get; set; }
}